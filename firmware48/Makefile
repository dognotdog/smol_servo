##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.7.1] date: [Tue Apr 21 22:18:04 EDT 2020] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = firmware48


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Os


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build
USBD4CUBE_DIR = Middlewares/USBDevice4Cube
USBD_DIR = Middlewares/USBDevice
HID_DIR = Middlewares/HidReportDef/include

######################################
# source
######################################
# C sources
C_SOURCES =  \
Src/main.c \
Src/stm32g4xx_it.c \
Src/stm32g4xx_hal_msp.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_gpio.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_ll_adc.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_i2c.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_i2c_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_spi.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_spi_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_tim.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_tim_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_ll_pwr.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_uart.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_uart_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_pcd.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_pcd_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_ll_usb.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_rcc.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_rcc_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_flash.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_flash_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_flash_ramfunc.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_exti.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_dma.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_dma_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_pwr.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_pwr_ex.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_cortex.c \
Src/system_stm32g4xx.c \
Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_cordic.c

# C_SOURCES += ../stm32-servo-firmware/src/usbd/usbd_cdc.c
# C_SOURCES += ../stm32-servo-firmware/src/usb_cdc.c
C_SOURCES += ../stm32-servo-firmware/src/ssf_perf.c
C_SOURCES += ../stm32-servo-firmware/src/ssf_led.c
C_SOURCES += ../stm32-servo-firmware/src/ssf_spi.c
C_SOURCES += ../stm32-servo-firmware/src/ssf_pwm.c
C_SOURCES += ../stm32-servo-firmware/src/ssf_analog.c
C_SOURCES += ../stm32-servo-firmware/src/ssf_mctrl.c
C_SOURCES += ../stm32-servo-firmware/src/utime.c
C_SOURCES += ../stm32-servo-firmware/src/debug_uart.c
C_SOURCES += ../stm32-servo-firmware/src/ssf_main.c
C_SOURCES += ../stm32-servo-firmware/src/usbd/usb_device.c
C_SOURCES += ../stm32-servo-firmware/src/usbd/servo_hid_if.c
C_SOURCES += ../stm32-servo-firmware/src/usbd/hal_usb.c
C_SOURCES += $(USBD4CUBE_DIR)/XPD_USB/xpd_usb.c
C_SOURCES += $(USBD4CUBE_DIR)/XPD_USB/xpd_usb_otg.c
C_SOURCES += $(USBD_DIR)/Templates/console_if.c
C_SOURCES += $(USBD_DIR)/Device/usbd.c
C_SOURCES += $(USBD_DIR)/Device/usbd_ctrl.c
C_SOURCES += $(USBD_DIR)/Device/usbd_desc.c
C_SOURCES += $(USBD_DIR)/Device/usbd_ep.c
C_SOURCES += $(USBD_DIR)/Device/usbd_if.c
C_SOURCES += $(USBD_DIR)/Device/usbd_utils.c
C_SOURCES += $(USBD_DIR)/Class/CDC/usbd_cdc.c
C_SOURCES += $(USBD_DIR)/Class/HID/usbd_hid.c

# ASM sources
ASM_SOURCES =  \
startup_stm32g431xx.s


#######################################
# binaries
#######################################
GCC_PATH = /Users/dog/Applications/ARM-Toolchain/gcc-arm-none-eabi-8-2019-q3-update/bin

PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
GDB = $(GCC_PATH)/$(PREFIX)gdb
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4


# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32G431xx

C_DEFS += -DSTM32G431 
C_DEFS += -DSTM32 
C_DEFS += -DPERF_MONITOR_ENABLED
# Hardware version 0.1.0
C_DEFS += -DSSF_HARDWARE_VERSION=0x000300
# use UART_PRINTF to output debug info through UART instead of stdout
C_DEFS += -DDEBUG_UART_PRINTF=1
# use USB_PRINTF when stdio is not USB but you want output on it
# C_DEFS += -DDEBUG_USB_PRINTF=1

# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-IInc \
-IDrivers/STM32G4xx_HAL_Driver/Inc \
-IDrivers/STM32G4xx_HAL_Driver/Inc/Legacy \
-IDrivers/CMSIS/Device/ST/STM32G4xx/Include \
-IDrivers/CMSIS/Include

C_INCLUDES += -I../stm32-servo-firmware/src
C_INCLUDES += -I../stm32-servo-firmware/src/usbd
C_INCLUDES += -I$(USBD4CUBE_DIR)/XPD_USB
C_INCLUDES += -I$(USBD_DIR)/Include
C_INCLUDES += -I$(USBD_DIR)/PDs/STM32_XPD
C_INCLUDES += -I$(HID_DIR)



# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

# warnings we want to be errors
CFLAGS += -Werror=incompatible-pointer-types
CFLAGS += -Werror=discarded-qualifiers
CFLAGS += -Werror=implicit-function-declaration
CFLAGS += -Werror=int-conversion
CFLAGS += -Wno-pointer-sign
CFLAGS += -Wno-comment
CFLAGS += -Werror=implicit-int
# flags for using floats 
CFLAGS += -Werror=double-promotion
CFLAGS += -fsingle-precision-constant

# CFLAGS += -flto


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32G431CBUx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

LDFLAGS += -u _printf_float
# LDFLAGS += -flto


# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

# J-Link
# OPENOCD_COMMON += set WORKAREASIZE 0x5800; 
# OPENOCD_COMMON += source [find interface/jlink.cfg]; 
# OPENOCD_COMMON += transport select swd; 
# OPENOCD_COMMON += debug_level 2; 
# OPENOCD_COMMON += set CHIPNAME STM32G431KBUx; 
# OPENOCD_COMMON += set CHIPNAME_CPU0_ACTIVATED 1; 
# OPENOCD_COMMON += reset_config none; 
# OPENOCD_COMMON += set CONNECT_UNDER_RESET 0; 
# OPENOCD_COMMON += source [find target/stm32g4x.cfg]; 
# OPENOCD_COMMON += adapter_khz 2000; 
# OPENOCD_COMMON += gdb_port disabled; 

# ST-LINK
OPENOCD_COMMON += set WORKAREASIZE 0x5800; 
OPENOCD_COMMON += source [find interface/stlink.cfg]; 
OPENOCD_COMMON += transport select hla_swd; 
OPENOCD_COMMON += debug_level 2; 
OPENOCD_COMMON += set CHIPNAME STM32G431KBUx; 
OPENOCD_COMMON += set CHIPNAME_CPU0_ACTIVATED 1; 
OPENOCD_COMMON += reset_config none; 
OPENOCD_COMMON += set CONNECT_UNDER_RESET 0; 
OPENOCD_COMMON += set CLOCK_FREQ 4000; 
OPENOCD_COMMON += source [find target/stm32g4x.cfg]; 
# OPENOCD_COMMON += gdb_port disabled; 

.PHONY: program
program: $(BUILD_DIR)/$(TARGET).hex
	openocd --command "$(OPENOCD_COMMON) init; reset halt; program $(BUILD_DIR)/$(TARGET).hex verify reset; sleep 100; reset run; exit"


.PHONY: bootm
bootm:
	openocd --command "$(OPENOCD_COMMON) init; reset init; $$target_name mdw 0x40022010; $$target_name mdw 0x40022020; stm32l4x option_read 0 0x10; stm32l4x option_read 0 0x20;"

# 	openocd --command "$(OPENOCD_COMMON) init; reset init; mww 0x4002200C 0x45670123; mww 0x4002200C 0xCDEF89AB; mdw 0x40022010; mdw 0x40022020; exit"


.PHONY: rst
rst: 
	openocd --command "$(OPENOCD_COMMON) init; reset run; exit"

.PHONY: gdbserver
gdbserver: 
	openocd --command "$(OPENOCD_COMMON) gdb_port 3333; init; reset halt;"

.PHONY: debug
debug:
	$(GDB) --eval-command="target remote localhost:3333"  $(BUILD_DIR)/$(TARGET).elf

.PHONY: nm
nm:
	$(GNM) -n $(BUILD_DIR)/$(TARGET).elf

.PHONY: size
size:
	$(GSIZE) -t $(BUILD_DIR)/$(TARGET).elf



#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
